package com.malware.booted.service;

import com.malware.booted.domain.OrderHistory;
import com.malware.booted.model.OrderHistoryDTO;
import com.malware.booted.repos.OrderHistoryRepository;
import java.util.List;
import java.util.stream.Collectors;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;


@Service
public class OrderHistoryService {

    private final OrderHistoryRepository orderHistoryRepository;

    public OrderHistoryService(final OrderHistoryRepository orderHistoryRepository) {
        this.orderHistoryRepository = orderHistoryRepository;
    }

    public List<OrderHistoryDTO> findAll() {
        return orderHistoryRepository.findAll(Sort.by("id"))
                .stream()
                .map(orderHistory -> mapToDTO(orderHistory, new OrderHistoryDTO()))
                .collect(Collectors.toList());
    }

    public OrderHistoryDTO get(final Long id) {
        return orderHistoryRepository.findById(id)
                .map(orderHistory -> mapToDTO(orderHistory, new OrderHistoryDTO()))
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND));
    }

    public Long create(final OrderHistoryDTO orderHistoryDTO) {
        final OrderHistory orderHistory = new OrderHistory();
        mapToEntity(orderHistoryDTO, orderHistory);
        return orderHistoryRepository.save(orderHistory).getId();
    }

    public void update(final Long id, final OrderHistoryDTO orderHistoryDTO) {
        final OrderHistory orderHistory = orderHistoryRepository.findById(id)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND));
        mapToEntity(orderHistoryDTO, orderHistory);
        orderHistoryRepository.save(orderHistory);
    }

    public void delete(final Long id) {
        orderHistoryRepository.deleteById(id);
    }

    private OrderHistoryDTO mapToDTO(final OrderHistory orderHistory,
            final OrderHistoryDTO orderHistoryDTO) {
        orderHistoryDTO.setId(orderHistory.getId());
        orderHistoryDTO.setTaxes(orderHistory.getTaxes());
        return orderHistoryDTO;
    }

    private OrderHistory mapToEntity(final OrderHistoryDTO orderHistoryDTO,
            final OrderHistory orderHistory) {
        orderHistory.setTaxes(orderHistoryDTO.getTaxes());
        return orderHistory;
    }

}
